# $Id: en.yaml 278 2008-04-09 15:04:45Z jakob $

locale_name: English
locale_id: en

messages:

 ENGINE:CRASH:
  args: 0
  format: DNSCheck engine crashed

 ASN:LOOKUP:
  args: 1
  format: Looking up AS number for %s.
 ASN:INVALID_ADDRESS:
  args: 1
  format: %s is an invalid IP address.
 ASN:ANNOUNCE_BY:
  args: 2
  format: %s announced by AS %s.
 ASN:NOT_ANNOUNCE:
  args: 1
  format: %s not announced.
 ASN:LOOKUP_ERROR:
  args: 1
  format: Error looking up AS number for %s.

 DNS:QUERY_EXPLICIT:
  args: 4
  format: Query %s for %s/%s/%s.
  descr: ~
 DNS:QUERY_RESOLVER:
  args: 3
  format: DNS query for %s/%s/%s.
 DNS:RESOLVER_QUERY_TIMEOUT:
  args: 3 
  format: DNS resolver timed out in query for %s/%s/%s.
  descr: ~
 DNS:QUERY_PARENT:
  args: 4
  format: Query parent of %s for %s/%s/%s.
 DNS:QUERY_PARENT_NOCACHE:
  args: 4
  format: Query parent (without cache) of %s for %s/%s/%s.
 DNS:FIND_PARENT:
  args: 2
  format: Find parent of %s/%s.
 DNS:NO_PARENT:
  args: 2
  format: Failed to find parent of %s/%s.
  descr: DNSCheck failed to find the parent of zone.
 DNS:PARENT_OF:
  args: 3
  format: Found %s as parent of %s/%s.
 DNS:EXPLICIT_RESPONSE:
  args: 1
  format: Name server response: %s
 DNS:PARENT_RESPONSE:
  args: 1
  format: DNS response from parent: %s
 DNS:CHILD_RESPONSE:
  args: 1
  format: DNS response from child: %s
 DNS:RESOLVER_RESPONSE:
  args: 1
  format: DNS response from resolver: %s
 DNS:NO_PARENT_NS:
  args: 3
  format: Failed to find name servers for %s (parent of %s/%s). 
  descr: ~
 DNS:QUERY_TIMEOUT:
  args: 4
  format: Name server %s timed out in query for %s/%s/%s.
  descr: ~
 DNS:QUERY_CHILD:
  args: 4
  format: Query any name server of %s for %s/%s/%s.
 DNS:QUERY_CHILD_NOCACHE:
  args: 4
  format: Query any name server (without cache) of %s for %s/%s/%s.
 DNS:NO_CHILD_NS:
  args: 2
  format: Failed to find name servers of %s/%s.
  descr: ~
 DNS:ADDRESS_BLACKLIST_ADD:
  args: 4
  format: Adding name server %s to blacklist.
 DNS:ADDRESS_BLACKLISTED:
  args: 4
  format: Name server %s blacklisted.
 DNS:LOOKUP_ERROR:
  args: 1
  format: DNS lookup error (%s).
  descr: ~
 DNS:NO_EDNS:
  args: 1
  format: EDNS not supported by %s.
  descr: EDNS is an extension to the DNS protocol. The major change is that the 512 byte size limit of the query/answer packet has been removed, which allows more information to be provided.  EDNS is essential for newer protocols and technologies that requires larger packet size like DNSSEC and IPv6.
 DNS:NO_ANSWER:
  args: 4
  format: No answer received from %s when querying for %s/%s/%s.
  descr: ~
 DNS:NOT_AUTH:
  args: 4
  format: Name server %s not authoritative for %s/%s/%s.
 DNS:ANSWER_DUMP:
  args: 1
  format: DNS query returned: %s
 DNS:SETUP_RESOLVER:
  args: 0
  format: DNS resolver set up.
 DNS:SET_BUFSIZE:
  args: 1
  format: DNS resolver EDNS buffer size set to %s.
 DNS:TRANSPORT_TCP:
  args: 0
  format: DNS resolver transport set to TCP.
 DNS:TRANSPORT_UDP:
  args: 0
  format: DNS resolver transport set to UDP.
 DNS:RECURSION_DESIRED:
  args: 0
  format: DNS resolver recursion desired.
 DNS:RECURSION_DISABLED:
  args: 0
  format: DNS resolver recursion disabled.
 DNS:DNSSEC_DESIRED:
  args: 0
  format: DNS resolver DNSSEC desired.
 DNS:DNSSEC_DISABLED:
  args: 0
  format: DNS resolver DNSSEC disabled.
 DNS:GET_NS_AT_PARENT:
  args: 2
  format: DNS query for NS of %s/%s at parent.
 DNS:GET_NS_AT_CHILD:
  args: 2
  format: DNS query for NS of %s/%s at child.
 DNS:INITIALIZING_NAMESERVERS:
  args: 2
  format: Initializing name servers for %s/%s.
 DNS:NAMESERVERS_INITIALIZED:
  args: 2
  format: Name servers for %s/%s initialized.
 DNS:NAMESERVER_FOUND:
  args: 4
  format: Found name server for %s/%s: %s (%s)
 DNS:FIND_PARENT_BEGIN:
  args: 2
  format: Trying to find parent of %s/%s
 DNS:NXDOMAIN:
  args: 2
  format: Domain %s/%s does not exist.
  descr: ~
 DNS:FIND_PARENT_DOMAIN:
  args: 1
  format: Using %s as a start for parent trace.
 DNS:FIND_PARENT_TRY:
  args: 1
  format: Checking %s as parent domain.
 DNS:FIND_PARENT_UPPER:
  args: 1
  format: Parent might be %s.
 DNS:FIND_PARENT_RESULT:
  args: 3
  format: Resolved %s as parent of %s/%s.
 DNS:FIND_MX_BEGIN:
  args: 1
  format: Lookup up mail exchanger for %s
 DNS:FIND_MX_RESULT:
  args: 2
  format: Found mail exchanger for %s: %s
 DNS:FIND_ADDRESSES:
  args: 2
  format: Found addresses of %s/%s
 DNS:FIND_ADDRESSES_RESULT:
  args: 3
  format: Addresses for %s/%s: %s

 ADDRESS:BEGIN:
  args: 1
  format: Begin testing address %s.
 ADDRESS:INVALID:
  args: 1
  format: Adress %s is invalid or incorrect
  descr: ~
 ADDRESS:PRIVATE_IPV4:
  args: 1
  format: %s is a private IPv4 address.
  descr: A private IP address should normally not be exposed in the public DNS, since it's not reachable from the Internet.
 ADDRESS:RESERVED_IPV4:
  args: 1
  format: %s is a reserved IPv4 address.
  descr: Reserved IPv4 addresses should not be used on the public Internet.
 ADDRESS:RESERVED_IPV6:
  args: 1
  format: %s is a reserved IPv6 address.
  descr: Reserved IPv6 addresses should not be used on the public Internet.
 ADDRESS:PTR_NOT_FOUND:
  args: 2
  format: Could not find reverse address for %s (%s).
  descr: A PTR records for the address could not be found in in-addr.arpa.
 ADDRESS:PTR_HOSTNAME_NOT_FOUND:
  args: 2
  format: Reverse for %s points to an unknown host name (%s).
  descr: The PTR record for the address points to an unknown host name.
 ADDRESS:END:
  args: 1
  format: Done testing address %s.

 CONNECTIVITY:BEGIN:
  args: 1
  format: Begin testing connectivity for %s.
 CONNECTIVITY:ANNOUNCED_BY_ASN:
  args: 2
  format: Name server %s announced by: %s
  descr: The IP address is announced by an autonomous system (AS).
 CONNECTIVITY:MULTIPLE_ASN:
  args: 1
  format: Name server %s announced by multiple AS.
  descr: The name server is announced my more than one autonomous system (AS).
 CONNECTIVITY:NOT_ANNOUNCED:
  args: 1
  format: Name server %s not announced by any AS.
  descr: The IP address is not announced by any autonomous system and is most probably not reachable on the Internet.
 CONNECTIVITY:ASN_LIST:
  args: 1
  format: Zone announced by ASN: %s
 CONNECTIVITY:TOO_FEW_ASN:
  args: 1
  format: Zone announced by only one ASN (%s).
  descr: The zone's name servers are all located within the same autonomous system.
 CONNECTIVITY:ASN_COUNT_OK:
  args: 1
  format: Zone announced by more than one ASN (%s).
  descr: The zone's name serves are located within more than one autonomous system.
 CONNECTIVITY:END:
  args: 1
  format: Done testing connectivity for %s.

 DELEGATION:BEGIN:
  args: 1
  format: Begin testing delegation for %s.
 DELEGATION:NS_AT_PARENT:
  args: 1
  format: Name servers listed at parent: %s
  descr: This is the list of name servers that are listed at the parent. It should include all name servers listed at the child.
 DELEGATION:NOT_FOUND_AT_PARENT:
  args: 0
  format: Delegation not found at parent.
  descr: No delegation could be found at the parent, making your zone unreachable from the Internet.
 DELEGATION:NS_AT_CHILD:
  args: 1
  format: Name servers listed at child: %s
  descr: This is the list of name servers that are listed at the child . It must include all name servers listed at the parent.
 DELEGATION:NOT_FOUND_AT_CHILD:
  args: 0
  format: No name servers found at child.
  descr: No name servers could be found at the child. This usually means that the child is not configured to answer queries about the zone.
 DELEGATION:EXTRA_NS_PARENT:
  args: 1
  format: Superfluous name server listed at parent: %s
  descr: A name server listed at the parent, but not at the child, was found. This is most likely an administrative error. You should update the parent to match the name servers at the child as soon as possible.
 DELEGATION:EXTRA_NS_CHILD:
  args: 1
  format: Additional name server listed at child: %s
  descr: A name server listed at the child, but not at the parent, was found. This is most likely a configuration error, but there are sometimes reasons for setting up a zone this way.
  DELEGATION:TOO_FEW_NS:
   args: 1
   format: Too few name servers (%s).
   descr: Only one name server was found for the zone. You should always have at least two name servers for a zone to be able to handle transient connectivity problems.
 DELEGATION:TOO_FEW_NS_IPV4:
  args: 1
  format: Too few IPv4 name servers (%s).
  descr: Only one IPv4 name server was found for the zone. You should always have at least two IPv4 name servers for a zone to be able to handle transient connectivity problems.
 DELEGATION:TOO_FEW_NS_IPV6:
  args: 1
  format: Too few IPv6 name servers (%s).
  descr: Only one IPv6 name server was found for the zone. You should always have at least two IPv6 name servers for a zone to be able to handle transient connectivity problems.
 DELEGATION:NO_NS_IPV4:
  args: 0
  format: No IPv4 name servers found.
 DELEGATION:NO_NS_IPV6:
  args: 0
  format: No IPv4 name servers found.
 DELEGATION:MATCHING_GLUE:
  args: 2
  format: Checking glue for %s (%s).
 DELEGATION:GLUE_FOUND_AT_PARENT:
  args: 3
  format: Parent glue for %s found: %s (%s)
  descr: The IP address of the name server was found at the parent.
 DELEGATION:GLUE_FOUND_AT_CHILD:
  args: 3
  format: Child glue for %s found: %s (%s)
  descr: The IP address of the name server was found at the child.
 DELEGATION:INCONSISTENT_GLUE:
  args: 1
  format: Inconsistent glue for name server %s.
  descr: The address of a name server differed from the child and the parent.  This is a configuration error and should be corrected as soon as possible.
 DELEGATION:GLUE_MISSING_AT_CHILD:
  args: 1
  format: Missing glue at child: %s
  descr: The IP address of the name servers was not found at the child. This is a configuration error and should be corrected as soon as possible.
 DELEGATION:NS_HISTORY:
  args: 2
  format: Previously used name servers for %s: %s
 DELEGATION:STILL_AUTH:
  args: 3
  format: Previously used name server %s (%s) is still authoritative for %s.
  descr: A previously used name server is still answering authoritative for the zone.  This is probably due to old zone data still being served by a no longer used server.  To correct this problem, contact the administrator of the name server and have them remove the zone in their configuration.
 DELEGATION:END:
  args: 1
  format: Done testing delegation for %s.

 DNSSEC:BEGIN:
  args: 1
  format: Begin testing DNSSEC for %s.
 DNSSEC:CHECKING_DS_AT_PARENT:
  args: 1
  format: Checking DS records for %s at parent.
 DNSSEC:DS_FOUND:
  args: 1
  format: Found DS record for %s at parent.
  descr: A DS (delegation signer) RRset was found at the parent.  This indicates a secure delegation, i.e. the child must be signed.
 DNSSEC:NO_DS_FOUND:
  args: 1
  format: Did not find DS record for %s at parent.
  descr: A DS (delegation signer) RRset could not be found at the parent.  This indicates an insecure delegation, i.e. the child does not have to be signed.
 DNSSEC:CHECKING_DNSKEY_AT_CHILD:
  args: 1
  format: Checking DNSKEY records for %s at child.
 DNSSEC:DNSKEY_FOUND:
  args: 1
  format: Found DNSKEY record for %s at child.
  descr: A DNSKEY RRset was found at the child, indicating that the child probably uses DNSSEC.
 DNSSEC:DNSKEY_NOT_FOUND:
  args: 1
  format: Did not find DNSKEY record for %s at child.
  descr: A DNSKEY RRset could not be found at the child, indicating that the child probably not uses DNSSEC.
 DNSSEC:DETERMINE_SECURITY_STATUS:
  args: 1
  format: Determining security status for %s.
 DNSSEC:INCONSISTENT_SECURITY:
  args: 1
  format: Inconsistent security for %s - DS found at parent, but no DNSKEY found at child.
  descr: The parent has a secure delegation to the child (indicated by DS RRset at the parent), but the child has no DNSKEY.  This is probably due to a previously signed zone that became unsigned without requesting the parent to remove the secure delegation.
 DNSSEC:CONSISTENT_SECURITY:
  args: 1
  format: Consistent security for %s.
 DNSSEC:SKIPPED_NO_KEYS:
  args: 1
  format: No DNSKEY(s) found at child, other tests skipped.
 DNSSEC:MISSING_DS:
  args: 1
  format: Broken chain of trust for %s - DNSKEY found at child, but no DS was found at parent.
  descr: The child seems to use DNSSEC, but the parent has no secure delegation.  Because of this, the chain of trust between the parent and the child is broken and validating resolvers will not be able to validate answers from the child.
 DNSSEC:CHECKING_CHILD:
  args: 1
  format: Checking DNSSEC at child (%s).
 DNSSEC:DNSKEY_ALGORITHM_NOT_RECOMMENDED:
  args: 3
  format: DNSKEY %s (tag %s) is using a not recommended algorithm: %s
  descr: A DNSKEY using a not recommended algorithm was found - you should consider stop using not recommended algorithms unless you have a very good reason for using them.
 DNSSEC:DNSKEY_SKIP_PROTOCOL:
  args: 3
  format: DNSKEY %s (tag %s) is not a DNSSEC key (protocol=%s).
  descr: DNSKEYs must have a protocol value of DNSSEC (3).
 DNSSEC:DNSKEY_SKIP_TYPE:
  args: 2
  format: DNSKEY %s (tag %s) is not a zone key.
  descr: DNSKEYs must be a zone key.
 DNSSEC:DNSKEY_SEP:
  args: 2
  format: DNSKEY %s (tag %s) is marked as a secure entry point (SEP).
  descr: A secure entry point (SEP) is used as part of the chain of trust from the parent to the child.
 DNSSEC:DNSKEY_MANDATORY_FOUND:
  args: 1
  format: At least one mandatory algorithm found for DNSKEY %s.
 DNSSEC:DNSKEY_MANDATORY_NOT_FOUND:
  args: 1
  format: No mandatory algorithm found for DNSKEY %s.
  descr: At least one DNSKEY should be of type RSA/SHA1.
 DNSSEC:ADDITIONAL_PROCESSING_BROKEN:
  args: 1
  format: DNSSEC additional processing broken for %s.
  descr: No DNSSEC signatures were included in replies from the name server.  This is probably due to a misconfiguration at the name server.
 DNSSEC:NO_SIGNATURES:
  args: 1
  format: No signatures found for %s.
  descr: No DNSSEC signatures was found when querying the zone. Perhaps the zone isn't signed?
 DNSSEC:CHILD_CHECK_ABORTED:
  args: 1
  format: DNSSEC child checks aborted for %s.
 DNSSEC:DNSKEY_SIGNATURE_OK:
  args: 2
  format: Found RRSIG(DNSKEY %s) created by published key (tag %s).
 DNSSEC:DNSKEY_SIGNER_UNPUBLISHED:
  args: 2
  format: Found RRSIG(DNSKEY %s) created by unpublished key (tag %s).
  descr: DNSSEC signatures created by unpublished keys can't be validated by validating resolvers.  All keys used to sign data must be published.
 DNSSEC:DNSKEY_VALID_SIGNATURES:
  args: 1
  format: Enough valid signatures found for %s.
 DNSSEC:DNSKEY_NO_VALID_SIGNATURES:
  args: 1
  format: Not enough valid signatures found for %s.
  descr: No valid signatures for the DNSKEY RRset for the zone was found - make sure the zone is signed with a valid and published key.
 DNSSEC:SOA_SIGNATURE_OK:
  args: 2
  format: RRSIG(SOA %s) created by DNSKEY (tag %s) OK.
 DNSSEC:SOA_SIGNATURE_UNPUBLISHED:
  args: 2
  format: Found RRSIG(SOA %s) created by published key (tag %s).
  descr: DNSSEC signatures created by unpublished keys can't be validated by validating resolvers.  All keys used to sign data must be published.
 DNSSEC:SOA_VALID_SIGNATURES:
  args: 1
  format: Enough valid signatures over SOA RRset found for %s.
 DNSSEC:SOA_NO_VALID_SIGNATURES:
  args: 1
  format: Not enough valid signatures over SOA RRset found for %s.
  descr: No valid signatures for the SOA RRset for the zone was found - make sure the zone is signed with a valid and published key.
 DNSSEC:CHILD_CHECKED:
  args: 1
  format: DNSSEC child checks for %s complete.
 DNSSEC:CHECKING_PARENT:
  args: 1
  format: Checking DNSSEC at parent of %s.
 DNSSEC:PARENT_DS:
  args: 2
  format: Found DS(%s) at parent: %s
 DNSSEC:DS_KEYREF_OK:
  args: 2
  format: Parent DS(%s) refers to valid key at child: %s
 DNSSEC:DS_KEYREF_INVALID:
  args: 2
  format: Parent DS(%s) refers to invalid key at child: %s
  descr: The DS RRset must refer to a valid DNSKEY at the child, or the chain of trust between the parent and the child is broken and validating resolver will not be able to validate answers from the child.
 DNSSEC:DS_TO_SEP:
  args: 2
  format: Parent DS(%s) refers to secure entry point (SEP) at child: %s
 DNSSEC:DS_TO_NONSEP:
  args: 2
  format: Parent DS(%s) does not refer to secure entry point (SEP) at child: %s
  descr: The DS RRset refers to a DNSKEY at the child, but the key is not marked as a secure entry point.
 DNSSEC:DS_MANDATORY_FOUND:
  args: 1
  format: At least one mandatory DS algorithm found for %s.
 DNSSEC:DS_MANDATORY_NOT_FOUND:
  args: 1
  format: No mandatory DS algorithm found for %s.
  descr: Since none of the hash algorithms published in the DS RRset are mandatory, some validating resolvers will not be able to follow the chain of trust from the parent to the child.
 DNSSEC:PARENT_CHECKED:
  args: 1
  format: DNSSEC parent checks for %s complete.
 DNSSEC:RRSIG_NOT_YET_VALID:
  args: 1
  format: DNSSEC signature not yet valid: %s
  descr: Not yet valid signatures will be ignored by validating resolvers.
 DNSSEC:RRSIG_EXPIRED:
  args: 1
  format: DNSSEC signature expired: %s
  descr: Expired signatures will be ignored by validating resolvers.
 DNSSEC:RRSIG_VALID:
  args: 1
  format: DNSSEC signature valid: %s
 DNSSEC:END:
  args: 1
  format: Done testing DNSSEC for %s.

 HOST:BEGIN:
  args: 1
  format: Begin testing host %s.
 HOST:ILLEGAL_NAME:
  args: 2
  format: Host name %s is illegal (syntax error at %s)
  descr: The hostname is not syntactially correct according to RFC 952.  A common error is to begin the hostname with a non-letter (a-z) or use invalid characters (only a-z, 0-9 and - are allowed).
 HOST:NOT_FOUND:
  args: 1
  format: No address found for %s.
  descr: No IPv4 or IPv6 address was found the host name.
 HOST:CNAME_FOUND:
  args: 1
  format: Host name %s refers to a CNAME.
  descr: The host name is an alias (CNAME), which is not allowed.  Host names must be published with an A or AAAA record.
 HOST:END:
  args: 1
  format: Done testing host %s.

 MAIL:BEGIN:
  args: 1
  format: Begin testing email address %s.
 MAIL:ADDRESS_SYNTAX:
  args: 1
  format: %s is not a valid email address.
 MAIL:MAIL_EXCHANGER:
  args: 2
  format: Mail exchangers for %s found %s.
 MAIL:DOMAIN_NOT_FOUND:
  args: 1
  format: No mail exchanger found for domain %s.
  descr: No mail exchanger was found for the domain.  This makes it impossible to deliver email to any recipient within the domain.
 MAIL:HOST_ERROR:
  args: 1
  format: Invalid host name for mail exchanger %s.
  descr: The hostname for the mail exchanger is invalid.  A common error is to point the mail exchanger to an alias (CNAME) or directly to an IP address.
 MAIL:IPV6_ONLY:
  args: 1
  format: Mail exchanger %s is reachable by IPv6 only.
  descr: The mail exchanger is only reachable via IPv6, making it impossible for most hosts on the Interhet to deliver email to the domain.
 MAIL:END:
  args: 1
  format: Done testing email address %s.

 NAMESERVER:BEGIN:
  args: 1
  format: Begin testing name server %s.
 NAMESERVER:HOST_ERROR:
  args: 1
  format: Host name error for %s.
  descr: The specified host name was not a valid host name.
 NAMESERVER:CHECKING_RECURSION:
  args: 2
  format: Checking recursion for %s at address %s.
 NAMESERVER:RECURSIVE:
  args: 2
  format: Name server %s (%s) is recursive.
  descr: The name server answers recursive queries for 3rd parties (such as DNSCheck). By making a recursive query to a name server that provides recursion, an attacker can cause a name server to look up and cache information contained in zones under their control. Thus the victim name server is made to query the attackers malicious name servers, resulting in the victim caching and serving bogus data. 
 NAMESERVER:NOT_RECURSIVE:
  args: 2
  format: Name server %s (%s) is not recursive.
 NAMESERVER:CHECKING_AUTH:
  args: 2
  format: Checking authority for %s (%s).
 NAMESERVER:NOT_AUTH:
  args: 3
  format: Name server %s (%s) not authoritative for %s.
  descr: The name server does not answer authoritatively to queries for the tested domain.  This is probably due to misconfiguration, usually the name server is not set up to serve the tested domain. 
 NAMESERVER:AUTH:
  args: 3
  format: Name server %s (%s) authoritative for %s.
 NAMESERVER:TESTING_UDP:
  args: 2
  format: Testing UDP queries to name server %s at addrress %s.
 NAMESERVER:UDP_OK:
  args: 3
  format: Name server %s (%s) answers queries over UDP.
 NAMESERVER:NO_UDP:
  args: 3
  format: Name server %s (%s) does not answer queries over UDP.
  descr: The name server failed to answer queries sent over UDP.  This is probably due to the name server not correctly set up or due to misconfigured filtering in a firewall.
 NAMESERVER:TESTING_TCP:
  args: 2
  format: Testing TCP queries to name server %s at address %s.
 NAMESERVER:TCP_OK:
  args: 3
  format: Name server %s (%s) answers queries over TCP.
 NAMESERVER:NO_TCP:
  args: 3
  format: Name server %s (%s) does not answer queries over TCP.
  descr: The name server failed to answer queries sent over TCP.  This is probably due to the name server not correctly set up or due to misconfgured filtering in a firewall. It is a rather common misconception that DNS does not need TCP unless they provide zone transfers - perhaps the name server administrator is not aware that TCP usually is a requirement.
 NAMESERVER:TESTING_AXFR:
  args: 2
  format: Testing zone transfer for name server %s (%s).
 NAMESERVER:AXFR_SKIP:
  args: 3
  format: Name server %s (%s) not checked for zone transfer of %s.
  descr: The name server was not tested for zone transfer, since it did not answer queries over TCP.
 NAMESERVER:AXFR_OPEN:
  args: 3
  format: Name server %s (%s) open for zone transfer of %s.
  descr: This name server accepts zone transfer requests from any party.
 NAMESERVER:AXFR_CLOSED:
  args: 3
  format: Name server %s (%s) closed for zone transfer of %s.
 NAMESERVER:CHECKING_LEGACY_ID:
  args: 2
  format: Checking for legacy name server ID of %s (%s).
 NAMESERVER:LEGACY_ID:
  args: 4
  format: Legacy name server ID for %s (%s): %s = %s
 NAMESERVER:CHECKING_NSID:
  args: 2
  format: Checking for name server ID of %s (%s).
 NAMESERVER:NSID:
  args: 3
  format: Name server ID for %s (%s): %s
 NAMESERVER:SKIPPED_IPV4:
  args: 1
  format: IPv4 disabled - will not test name server at %s
 NAMESERVER:SKIPPED_IPV6:
  args: 1
  format: IPv6 disabled - will not test name server at %s
 NAMESERVER:END:
  args: 1
  format: Done testing name server %s.

 SERIAL:BEGIN:
  args: 1
  format: Begin testing serial numbers for %s.
 SERIAL:SOA_AT_ADDRESS:
  args: 2
  format: SOA at address %s has serial %s.
 SERIAL:DIFFERENT:
  args: 1
  format: %s different serials found.
  descr: The SOA serial are not the same among all name servers. This is usually due to misconfiguration, but can sometimes be the  result of slow zone propagation to secondary name servers.
 SERIAL:CONSISTENT:
  args: 0
  format: All SOA records have consistent serial numbers.
 SERIAL:END:
  args: 1
  format: Done testing serial numbers for %s.

 SMTP:BEGIN:
  args: 2
  format: Begin testing mail server %s with %s.
 SMTP:CONNECT_FAILED:
  args: 1
  format: Failed to connect to %s.
  descr: DNSCheck failed to connect to the mail server.  The server could be down or unreachable due to misconfigured routing and/or filtering.
 SMTP:BANNER:
  args: 1
  format: SMTP banner: %s
 SMTP:HELLO_FAILED:
  args: 1
  format: SMTP HELO failed while talking to %s.
  descr: The mail server did not accept our polite greeting.  This is probably due to misconfiguration.
 SMTP:MAIL_FROM:
  args: 1
  format: Using %s as SMTP from (MAIL_FROM).
 SMTP:RAW:
  args: 1
  format: SMTP Response: %s
 SMTP:MAIL_FROM_REJECTED:
  args: 1
  format: Host did not accept %s as SMTP destination.
  descr: The mail server did not accept our sender address.  DNSCheck uses a standard null sender address which must be accepted by mail servers.
 SMTP:RCPT_TO:
  args: 1
  format: Using %s as SMTP recipient (RCPT_TO).
 SMTP:RECIPIENT_REJECTED:
  args: 1
  format: Host did not accept %s as SMTP recipient.
  descr: The mail server did no accept mail to the recipient address.  This is probably due to an unknown address.
 SMTP:RSET:
  args: 0
  format: Sending SMTP reset (RSET).
 SMTP:QUIT:
  args: 0
  format: Sending SMTP quit (QUIT).
 SMTP:OK:
  args: 2
  format: SMTP testing of %s with %s succeeded without errors.
 SMTP:END:
  args: 2
  format: Done testing mail server %s with %s.

 SOA:BEGIN:
  args: 1
  format: Begin testing SOA parameters for %s.
 SOA:NOT_FOUND:
  args: 1
  format: No SOA record found for %s.
  descr: No SOA record was found when querying the name server.  This is most probably due to a misconfiguration at the name server - a zone must have a SOA record.
 SOA:FOUND:
  args: 1
  format: Found SOA record for %s.
 SOA:MULTIPLE_SOA:
  args: 1
  format: Multiple SOA records found for %s.
  descr: Multiple SOA records found when querying the name servers. This is a serious error and definitely due to a misconfiguration.
 SOA:MNAME_ERROR:
  args: 2
  format: Error while checking SOA MNAME for %s (%s).
  descr: The SOA MNAME was not a valid host name.
 SOA:MNAME_VALID:
  args: 2
  format: SOA MNAME for %s valid (%s).
 SOA:NS_NOT_FOUND:
  args: 1
  format: No NS record(s) found for %s.
  descr: No name server records was fould for the zone. This is a serious error and definitely due to a misconfiguration.
 SOA:MNAME_STEALTH:
  args: 2
  format: SOA MNAME for %s (%s) not listed as NS.
  descr: The name server listed as the SOA MNAME is not listed as a name server.
 SOA:MNAME_PUBLIC:
  args: 2
  format: SOA MNAME for %s (%s) listed as NS.
  descr: The name server listed as the SOA MNAME is listed as a name server.
 SOA:MNAME_NOT_AUTH:
  args: 2
  format: SOA MNAME for %s (%s) is not authoritative.
  descr: The name server listed as the original or primary source of data for this zone does not answer authoriative.  This is probably due to a misconfiguration - perhaps the SOA MNAME is not set up as name server for the zone.
 SOA:MNAME_IS_AUTH:
  args: 2
  format: SOA MNAME for %s (%s) is authoritative.
 SOA:RNAME_UNDELIVERABLE:
  args: 3
  format: Failed to deliver email for SOA MNAME of %s (%s) using %s. 
  descr: DNSCheck failed to deliver email to the email address listed as the one responsible for the zone.
 SOA:RNAME_DELIVERABLE:
  args: 3
  format: Successful attempt to deliver email for SOA MNAME of %s (%s) using %s. 
 SOA:RNAME_SYNTAX:
  args: 2
  format: Invalid SOA RNAME syntax for %s: %s
  descr: The email address specified in SOA RNAME is specified incorrectly.  A common error is to use @ in the address field - an address like hostmaster@example.com must be specified as hostmaster.example.com.
 SOA:TTL_SMALL:
  args: 3
  format: SOA TTL for %s too small (%s) - recommended >= %s.
  descr: The smaller the SOA TTL value, the more often resolver need to requery for SOA record.
 SOA:TTL_OK:
  args: 3
  format: SOA TTL for %s OK (%s) - recommended >= %s.
 SOA:REFRESH_SMALL:
  args: 3
  format: SOA refresh for %s too small (%s) - recommended >= %s.
  descr: SOA refresh decides how often a secondary name server should check the primary name server for zone updates.
 SOA:REFRESH_OK:
  args: 3
  format: SOA refresh for %s OK (%s) - recommended >= %s.
 SOA:RETRY_VS_REFRESH:
  args: 3
  format: SOA refresh for %s lower than retry (%s vs %s).
  descr: The retry value is the amount of time your secondary name servers will wait to contact the primary name server again if the last attempt failed.  If the refresh value is lower than the retry value, it's useless.
 SOA:RETRY_SMALL:
  args: 3
  format: SOA retry for %s too small (%s) - recommended >= %s.
  descr: The retry value is the amount of time your secondary name servers will wait to contact the primary name server again if the last attempt failed. If the retry value is too small, the secondary name server will retry too frequently.
 SOA:RETRY_OK:
  args: 3
  format: SOA retry for %s OK (%s) - recommended >= %s.
 SOA:EXPIRE_SMALL:
  args: 3
  format: SOA expire for %s too small (%s) - recommended >= %s.
  descr: The SOA expire value defines how long a secondary name server will wait before considering DNS data for a zone to be too old to serve in case it failed to reach the primary name server.
 SOA:EXPIRE_OK:
  args: 3
  format: SOA expire for %s OK (%s) - recommended >= %s.
 SOA:EXPIRE_VS_REFRESH:
  args: 1
  format: SOA expire for %s lower than refresh.
  descr: The SOA expire value should be at least 7 times the SOA refresh value, to give secondary name servers a fair chance of refreshing their copy of the zone before the data is considered too old to serve.
 SOA:MINIMUM_SMALL:
  args: 3
  format: SOA minimum for %s too small (%s) - recommended >= %s.
  descr: The SOA minimum is used to tell caching resolvers how long they may cache negative answers. If the value is too small, negative caching will not work and resolvers will re-query frequently.
 SOA:MINIMUM_OK:
  args: 3
  format: SOA minimum for %s OK (%s) - recommended >= %s.
 SOA:END:
  args: 1
  format: Done testing SOA parameters for %s.

 ZONE:BEGIN:
  args: 1
  format: Begin testing zone %s.
 ZONE:FATAL:
  args: 1
  format: Fatal error testing zone %s.
 ZONE:END:
  args: 1
  format: Test completed for zone %s.
